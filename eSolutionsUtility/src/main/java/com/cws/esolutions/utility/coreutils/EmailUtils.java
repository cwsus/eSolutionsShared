/*
 * Copyright (c) 2009 - 2020 CaspersBox Web Services
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.cws.esolutions.utility.coreutils;
/*
 * Project: eSolutionsCore
 * Package: com.cws.esolutions.core.utils
 * File: EmailUtils.java
 *
 * History
 *
 * Author               Date                            Comments
 * ----------------------------------------------------------------------------
 * cws-khuntly          11/23/2008 22:39:20             Created.
 */
import java.util.List;
import java.util.Objects;
import javax.mail.Session;
import javax.mail.Message;
import javax.mail.Transport;
import javax.mail.MessagingException;
import org.apache.logging.log4j.Logger;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.InternetAddress;
import org.apache.logging.log4j.LogManager;
import org.apache.commons.lang3.StringUtils;

import com.cws.esolutions.utility.UtilityConstants;
/**
 * Interface for the Application Data DAO layer. Allows access
 * into the asset management database to obtain, modify and remove
 * application information.
 *
 * @author cws-khuntly
 * @version 1.0
 */
public final class EmailUtils
{
    private static final String CNAME = EmailUtils.class.getName();

    static final Logger DEBUGGER = LogManager.getLogger(UtilityConstants.DEBUGGER);
    static final boolean DEBUG = DEBUGGER.isDebugEnabled();
    static final Logger ERROR_RECORDER = LogManager.getLogger(UtilityConstants.ERROR_LOGGER + CNAME);

    /**
     * Processes and sends an email message as generated by the requesting
     * application. This method is utilized with a JNDI datasource.
     *
     * @param mailConfig - The {@link com.cws.esolutions.core.config.xml.MailConfig} to utilize
     * @param message - The email message
     * @param isWeb - <code>true</code> if this came from a container, <code>false</code> otherwise
     * @throws MessagingException {@link javax.mail.MessagingException} if an exception occurs sending the message
     */
    public static final synchronized void sendEmailMessage(final Session mailSession, final List<Object> message) throws MessagingException
    {
        final String methodName = EmailUtils.CNAME + "#sendEmailMessage(final Session mailSession, final List<Object> message) throws MessagingException";

        if (DEBUG)
        {
            DEBUGGER.debug(methodName);
            DEBUGGER.debug("Value: {}", mailSession);
            DEBUGGER.debug("Value: {}", message);
        }

        Transport mailTransport = null;

        try
        {
            if (DEBUG)
            {
                DEBUGGER.debug("Session: {}", mailSession);
            }

            if (Objects.isNull(mailSession))
            {
                throw new MessagingException("Unable to configure email services");
            }

            if (DEBUG)
            {
            	mailSession.setDebug(DEBUG);	
            }

            MimeMessage mailMessage = new MimeMessage(mailSession);

            // Our emailList parameter should contain the following
            // items (in this order):
            // 0. Recipients
            // 1. From Address
            // 2. Generated-From (if blank, a default value is used)
            // 3. The message subject
            // 4. The message content
            // 5. The message id (optional)
            // We're only checking to ensure that the 'from' and 'to'
            // values aren't null - the rest is really optional.. if
            // the calling application sends a blank email, we aren't
            // handing it here.
            if (StringUtils.isBlank((String) message.get(0)))
            {
            	throw new MessagingException("No address was specified to send the message to. Cannot continue.");
            }

            for (final String to : (String[]) message.get(0))
            {
                if (DEBUG)
                {
                    DEBUGGER.debug(to);
                }

                mailMessage.setRecipient(Message.RecipientType.TO, new InternetAddress(to));
            }

            mailMessage.setFrom(new InternetAddress((String) message.get(1)));
            mailMessage.setSubject((String) message.get(3));
            mailMessage.setContent((String) message.get(4), "text/html");

            mailTransport = mailSession.getTransport("smtp");

            if (DEBUG)
            {
                DEBUGGER.debug("Transport: {}", mailTransport);
            }

            mailTransport.connect();

            if (mailTransport.isConnected())
            {
                Transport.send(mailMessage);
            }
        }
        catch (final MessagingException mex)
        {
            throw new MessagingException(mex.getMessage(), mex);
        }
        finally
        {
        	if (mailTransport.isConnected())
        	{
        		mailTransport.close();
        	}
        }
    }
}